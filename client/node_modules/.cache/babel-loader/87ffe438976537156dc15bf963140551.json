{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alexa\\\\OneDrive\\\\Desktop\\\\GW_Coding_BootCamp\\\\Sprinter-React\\\\client\\\\src\\\\components\\\\Item\\\\Item.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState, useRef } from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\"; // import Window from \"../Window/Window\";\n\nimport ITEM_TYPE from \"../../data/types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Item = ({\n  item,\n  index,\n  moveItem,\n  status\n}) => {\n  _s();\n\n  const ref = useRef(null);\n  const [, drop] = useDrop({\n    accept: ITEM_TYPE,\n\n    hover(item, monitor) {\n      if (!ref.current) {\n        return;\n      }\n\n      const dragIndex = item.index;\n      const hoverIndex = index;\n\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n\n      const hoveredRect = ref.current.getBoundingClientRect();\n      const hoverMiddleY = (hoveredRect.bottom - hoveredRect.top) / 2;\n      const mousePosition = monitor.getClientOffset();\n      const hoverClientY = mousePosition.y - hoveredRect.top;\n\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n\n      moveItem(dragIndex, hoverIndex);\n      item.index = hoverIndex;\n    }\n\n  });\n  const [{\n    isDragging\n  }, drag] = useDrag({\n    type: ITEM_TYPE,\n    item: { ...item,\n      index\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n  const [show, setShow] = useState(false);\n\n  const onOpen = () => setShow(true);\n\n  const onClose = () => setShow(false);\n\n  drag(drop(ref));\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: ref,\n      style: {\n        opacity: isDragging ? 0 : 1\n      },\n      className: \"item\",\n      onClick: onOpen,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"color-bar\",\n        style: {\n          backgroundColor: status.color\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"item-title\",\n        children: item.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"item-content\",\n        children: item.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"item-status\",\n        children: item.icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Item, \"rF6lY0o2hFLpxncNahbNMfU9l3Q=\", false, function () {\n  return [useDrop, useDrag];\n});\n\n_c = Item;\nexport default Item;\n\nvar _c;\n\n$RefreshReg$(_c, \"Item\");","map":{"version":3,"sources":["C:/Users/alexa/OneDrive/Desktop/GW_Coding_BootCamp/Sprinter-React/client/src/components/Item/Item.js"],"names":["React","Fragment","useState","useRef","useDrag","useDrop","ITEM_TYPE","Item","item","index","moveItem","status","ref","drop","accept","hover","monitor","current","dragIndex","hoverIndex","hoveredRect","getBoundingClientRect","hoverMiddleY","bottom","top","mousePosition","getClientOffset","hoverClientY","y","isDragging","drag","type","collect","show","setShow","onOpen","onClose","opacity","backgroundColor","color","title","content","icon"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,EAAoCC,MAApC,QAAkD,OAAlD;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,WAAjC,C,CACA;;AACA,OAAOC,SAAP,MAAsB,kBAAtB;;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA,QAAf;AAAyBC,EAAAA;AAAzB,CAAD,KAAwC;AAAA;;AACjD,QAAMC,GAAG,GAAGT,MAAM,CAAC,IAAD,CAAlB;AAEA,QAAM,GAAGU,IAAH,IAAWR,OAAO,CAAC;AACrBS,IAAAA,MAAM,EAAER,SADa;;AAErBS,IAAAA,KAAK,CAACP,IAAD,EAAOQ,OAAP,EAAgB;AACjB,UAAI,CAACJ,GAAG,CAACK,OAAT,EAAkB;AACd;AACH;;AACD,YAAMC,SAAS,GAAGV,IAAI,CAACC,KAAvB;AACA,YAAMU,UAAU,GAAGV,KAAnB;;AAEA,UAAIS,SAAS,KAAKC,UAAlB,EAA8B;AAC1B;AACH;;AAED,YAAMC,WAAW,GAAGR,GAAG,CAACK,OAAJ,CAAYI,qBAAZ,EAApB;AACA,YAAMC,YAAY,GAAG,CAACF,WAAW,CAACG,MAAZ,GAAqBH,WAAW,CAACI,GAAlC,IAAyC,CAA9D;AACA,YAAMC,aAAa,GAAGT,OAAO,CAACU,eAAR,EAAtB;AACA,YAAMC,YAAY,GAAGF,aAAa,CAACG,CAAd,GAAkBR,WAAW,CAACI,GAAnD;;AAEA,UAAIN,SAAS,GAAGC,UAAZ,IAA0BQ,YAAY,GAAGL,YAA7C,EAA2D;AACvD;AACH;;AAED,UAAIJ,SAAS,GAAGC,UAAZ,IAA0BQ,YAAY,GAAGL,YAA7C,EAA2D;AACvD;AACH;;AACDZ,MAAAA,QAAQ,CAACQ,SAAD,EAAYC,UAAZ,CAAR;AACAX,MAAAA,IAAI,CAACC,KAAL,GAAaU,UAAb;AACH;;AA3BoB,GAAD,CAAxB;AA8BA,QAAM,CAAC;AAAEU,IAAAA;AAAF,GAAD,EAAiBC,IAAjB,IAAyB1B,OAAO,CAAC;AACnC2B,IAAAA,IAAI,EAAEzB,SAD6B;AAEnCE,IAAAA,IAAI,EAAE,EAAE,GAAGA,IAAL;AAAWC,MAAAA;AAAX,KAF6B;AAGnCuB,IAAAA,OAAO,EAAEhB,OAAO,KAAK;AACjBa,MAAAA,UAAU,EAAEb,OAAO,CAACa,UAAR;AADK,KAAL;AAHmB,GAAD,CAAtC;AAQA,QAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBhC,QAAQ,CAAC,KAAD,CAAhC;;AAEA,QAAMiC,MAAM,GAAG,MAAMD,OAAO,CAAC,IAAD,CAA5B;;AAEA,QAAME,OAAO,GAAG,MAAMF,OAAO,CAAC,KAAD,CAA7B;;AAEAJ,EAAAA,IAAI,CAACjB,IAAI,CAACD,GAAD,CAAL,CAAJ;AAEA,sBACI,QAAC,QAAD;AAAA,2BACI;AACI,MAAA,GAAG,EAAEA,GADT;AAEI,MAAA,KAAK,EAAE;AAAEyB,QAAAA,OAAO,EAAER,UAAU,GAAG,CAAH,GAAO;AAA5B,OAFX;AAGI,MAAA,SAAS,EAAE,MAHf;AAII,MAAA,OAAO,EAAEM,MAJb;AAAA,8BAMI;AAAK,QAAA,SAAS,EAAE,WAAhB;AAA6B,QAAA,KAAK,EAAE;AAAEG,UAAAA,eAAe,EAAE3B,MAAM,CAAC4B;AAA1B;AAApC;AAAA;AAAA;AAAA;AAAA,cANJ,eAOI;AAAG,QAAA,SAAS,EAAE,YAAd;AAAA,kBAA6B/B,IAAI,CAACgC;AAAlC;AAAA;AAAA;AAAA;AAAA,cAPJ,eAQI;AAAG,QAAA,SAAS,EAAE,cAAd;AAAA,kBAA+BhC,IAAI,CAACiC;AAApC;AAAA;AAAA;AAAA;AAAA,cARJ,eASI;AAAG,QAAA,SAAS,EAAE,aAAd;AAAA,kBAA8BjC,IAAI,CAACkC;AAAnC;AAAA;AAAA;AAAA;AAAA,cATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH,CArED;;GAAMnC,I;UAGeF,O,EA8BcD,O;;;KAjC7BG,I;AAuEN,eAAeA,IAAf","sourcesContent":["import React, { Fragment, useState, useRef } from \"react\";\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\n// import Window from \"../Window/Window\";\r\nimport ITEM_TYPE from \"../../data/types\";\r\n\r\nconst Item = ({ item, index, moveItem, status, }) => {\r\n    const ref = useRef(null);\r\n\r\n    const [, drop] = useDrop({\r\n        accept: ITEM_TYPE,\r\n        hover(item, monitor) {\r\n            if (!ref.current) {\r\n                return\r\n            }\r\n            const dragIndex = item.index;\r\n            const hoverIndex = index;\r\n\r\n            if (dragIndex === hoverIndex) {\r\n                return\r\n            }\r\n\r\n            const hoveredRect = ref.current.getBoundingClientRect();\r\n            const hoverMiddleY = (hoveredRect.bottom - hoveredRect.top) / 2;\r\n            const mousePosition = monitor.getClientOffset();\r\n            const hoverClientY = mousePosition.y - hoveredRect.top;\r\n\r\n            if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n                return;\r\n            }\r\n\r\n            if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n                return;\r\n            }\r\n            moveItem(dragIndex, hoverIndex);\r\n            item.index = hoverIndex;\r\n        },\r\n    });\r\n\r\n    const [{ isDragging }, drag] = useDrag({\r\n        type: ITEM_TYPE,\r\n        item: { ...item, index },\r\n        collect: monitor => ({\r\n            isDragging: monitor.isDragging()\r\n        })\r\n    });\r\n\r\n    const [show, setShow] = useState(false);\r\n\r\n    const onOpen = () => setShow(true);\r\n\r\n    const onClose = () => setShow(false);\r\n\r\n    drag(drop(ref));\r\n\r\n    return (\r\n        <Fragment>\r\n            <div\r\n                ref={ref}\r\n                style={{ opacity: isDragging ? 0 : 1 }}\r\n                className={\"item\"}\r\n                onClick={onOpen}\r\n            >\r\n                <div className={\"color-bar\"} style={{ backgroundColor: status.color }} />\r\n                <p className={\"item-title\"}>{item.title}</p>\r\n                <p className={\"item-content\"}>{item.content}</p>\r\n                <p className={\"item-status\"}>{item.icon}</p>\r\n            </div>\r\n            {/* <Window\r\n                item={item}\r\n                onClose={onClose}\r\n                show={show}\r\n            /> */}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Item;"]},"metadata":{},"sourceType":"module"}