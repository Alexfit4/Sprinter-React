{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alexa\\\\OneDrive\\\\Desktop\\\\GW_Coding_BootCamp\\\\Sprinter-React\\\\client\\\\src\\\\components\\\\Forms\\\\FormSprints.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, Component } from \"react\";\nimport { Form, Button, Col, Container, h1, InputGroup, Row } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport Select from \"react-select\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SprintsForms = props => {\n  _s();\n\n  // export default class SprintsForms extends Component {\n  // this.onChangeTitle = this.onChangeTitle.bind(this);\n  // this.onChangeDescription = this.onChangeDescription.bind(this);\n  // this.onChangeStartDate = this.onChangeStartDate.bind(this);\n  // this.onChangeManager = this.onChangeManager.bind(this);\n  // this.onChangeEmployee = this.onChangeEmployee.bind(this);\n  // this.onChangeStatus = this.onChangeStatus.bind(this);\n  // this.onSubmit = this.onSubmit.bind(this);\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [startDate, setstartDate] = useState(new Date());\n  const [manager, setManager] = useState([]);\n  const [employee, setEmployee] = useState([]);\n  const [status, setStatus] = useState(['open', 'in progress', \"in review\", \"done\"]);\n  const [employeeData, setEmployeeData] = useState([]); // const [selectedEmployee, setSelectedEmployee] = useState(\"none\");\n  // const handleTypeSelect = e => {\n  //     setSelectedEmployee(e.value);\n  // };\n  // const status = ['open', 'in progress', \"in review\", \"done\"]\n  // const employeeList = () => {\n  //     axios.get('http://localhost:5000/employee')\n  //         .then(response => {\n  //             if (response.data.length > 0) {\n  //                 this.setState({\n  //                     employee: response.data.map(EmployeeSchema => `${EmployeeSchema.first_name} ${EmployeeSchema.last_name}`),\n  //                 })\n  //             }\n  //         })\n  //         .catch((error) => {\n  //             console.log(error);\n  //         })\n  // }\n  // getEmployees() {\n  //     axios.get(\"http://localhost:5000/employee\")\n  //         .then(employee => {\n  //             console.log(employee)\n  //             const results = employee.data.map(employee => {\n  //                 return {\n  //                     employee: employee.first_name,\n  //                 }\n  //             })\n  //         }).catch(error => {\n  //             console.log(error)\n  //         })\n  // }\n  // const managerList = () => {\n  //     axios.get('http://localhost:5000/employee')\n  //         .then(response => {\n  //             let details = [];\n  //             for (var i in response.data) {\n  //                 details.push({ name: i, value: response.data[i] })\n  //             }\n  //             this.setState({ employee: details })\n  //         })\n  // }\n  // const optionTest = [\n  //     { value: 'chocolate', label: 'Chocolate' },\n  //     { value: 'strawberry', label: 'Strawberry' },\n  //     { value: 'vanilla', label: 'Vanilla' }\n  // ]\n\n  useEffect(() => {\n    axios.get('http://localhost:5000/employee').then(res => {\n      setEmployee(res.data.map(EmployeeSchema => `${EmployeeSchema.first_name} ${EmployeeSchema.last_name}`));\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []); // onChangeTitle = (e) => {\n  //     this.setState({\n  //         title: e.target.value\n  //     })\n  // }\n  // onChangeDescription = (e) => {\n  //     this.setState({\n  //         description: e.target.value\n  //     })\n  // }\n  // onChangeStartDate = (date) => {\n  //     this.setState({\n  //         startDate: date\n  //     })\n  // }\n  // onChangeManager = (e) => {\n  //     this.setState({\n  //         manager: e.target.value\n  //     })\n  // }\n  // onChangeEmployee = (e) => {\n  //     this.setState({\n  //         employee: e.target.value\n  //     })\n  // }\n  // onChangeStatus = (e) => {\n  //     this.setState({\n  //         status: e.target.value\n  //     })\n  // }\n  //DO NOT DELETE !!!\n  // onSubmit(e) {\n  //     e.preventDefault();\n  //     const project = {\n  //         title: this.state.title,\n  //         description: this.state.description,\n  //         manager: this.state.manager,\n  //         employee: this.state.employeeData,\n  //         startDate: this.state.startDate,\n  //         status: this.state.status\n  //     }\n  //     console.log(project);\n  //     axios.post('http://localhost:5000/projects', project)\n  //         .then(res => this.props.getSprints());\n  //     window.location = '/sprints';\n  // }\n\n  const onSubmit = e => {\n    e.preventDefault(); // let checkArray = [];\n    // for (var key in this.state.employeeData) {\n    //     if (this.state.employeeData[key] === true) {\n    //         checkArray.push(key);\n    //     }\n    // }\n\n    let project = {\n      title: title,\n      description: description,\n      manager: manager,\n      employee: employee,\n      startDate: startDate,\n      status: status // employeeData: checkArray.toString()\n\n    };\n    axios.post('http://localhost:5000/projects', project).then(res => props.getSprints());\n  };\n\n  const employeeOption = employee.map(selectedOption => {\n    return {\n      value: selectedOption,\n      label: selectedOption\n    };\n  });\n\n  const handleChange = selectedOption => {\n    console.log(selectedOption);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Col, {\n      md: \"4\",\n      className: \"mx-auto\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Sprint Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: onSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"exampleForm.ControlInput1\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Sprints Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"sprints\",\n            placeholder: \"Sprints Name\",\n            className: \"form-control\",\n            value: title,\n            onChange: e => setTitle(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"exampleForm.ControlInput2\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Sprints Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"details\",\n            placeholder: \"Sprints Details\",\n            className: \"form-control\",\n            value: description,\n            onChange: e => setDescription(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"exampleForm.ControlSelect1\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Manager\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"select\",\n            custom: true,\n            className: \"form-control\",\n            value: manager,\n            onChange: e => setManager(e.target.value),\n            children: employee.map(option => {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                // key={option}\n                value: option,\n                children: option\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 40\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          children: \"Employee\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            options: employeeOption,\n            onChange: handleChange,\n            isMulti: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"exampleForm.ControlSelect3\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"select\",\n            custom: true,\n            defaultValue: \"Open\",\n            className: \"form-control\",\n            value: status,\n            onChange: e => setStatus(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Open\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"In Progress\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"In Review\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Done\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          children: \"Submit form\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SprintsForms, \"EiZyPe0Wiu7oU85JPwj1H5NG2bs=\");\n\n_c = SprintsForms;\nexport default SprintsForms;\n\nvar _c;\n\n$RefreshReg$(_c, \"SprintsForms\");","map":{"version":3,"sources":["C:/Users/alexa/OneDrive/Desktop/GW_Coding_BootCamp/Sprinter-React/client/src/components/Forms/FormSprints.js"],"names":["React","useState","useEffect","Component","Form","Button","Col","Container","h1","InputGroup","Row","axios","Select","SprintsForms","props","title","setTitle","description","setDescription","startDate","setstartDate","Date","manager","setManager","employee","setEmployee","status","setStatus","employeeData","setEmployeeData","get","then","res","data","map","EmployeeSchema","first_name","last_name","catch","error","console","log","onSubmit","e","preventDefault","project","post","getSprints","employeeOption","selectedOption","value","label","handleChange","target","option"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Component } from \"react\";\r\nimport { Form, Button, Col, Container, h1, InputGroup, Row } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport Select from \"react-select\";\r\n\r\nconst SprintsForms = (props) => {\r\n\r\n\r\n\r\n    // export default class SprintsForms extends Component {\r\n\r\n    // this.onChangeTitle = this.onChangeTitle.bind(this);\r\n    // this.onChangeDescription = this.onChangeDescription.bind(this);\r\n    // this.onChangeStartDate = this.onChangeStartDate.bind(this);\r\n    // this.onChangeManager = this.onChangeManager.bind(this);\r\n    // this.onChangeEmployee = this.onChangeEmployee.bind(this);\r\n    // this.onChangeStatus = this.onChangeStatus.bind(this);\r\n    // this.onSubmit = this.onSubmit.bind(this);\r\n\r\n    const [title, setTitle] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [startDate, setstartDate] = useState(new Date());\r\n    const [manager, setManager] = useState([]);\r\n    const [employee, setEmployee] = useState([]);\r\n    const [status, setStatus] = useState(['open', 'in progress', \"in review\", \"done\"]);\r\n    const [employeeData, setEmployeeData] = useState([]);\r\n    // const [selectedEmployee, setSelectedEmployee] = useState(\"none\");\r\n\r\n    // const handleTypeSelect = e => {\r\n    //     setSelectedEmployee(e.value);\r\n    // };\r\n\r\n\r\n    // const status = ['open', 'in progress', \"in review\", \"done\"]\r\n\r\n\r\n\r\n    // const employeeList = () => {\r\n    //     axios.get('http://localhost:5000/employee')\r\n    //         .then(response => {\r\n    //             if (response.data.length > 0) {\r\n    //                 this.setState({\r\n    //                     employee: response.data.map(EmployeeSchema => `${EmployeeSchema.first_name} ${EmployeeSchema.last_name}`),\r\n\r\n\r\n    //                 })\r\n    //             }\r\n    //         })\r\n    //         .catch((error) => {\r\n    //             console.log(error);\r\n    //         })\r\n    // }\r\n\r\n\r\n    // getEmployees() {\r\n\r\n    //     axios.get(\"http://localhost:5000/employee\")\r\n    //         .then(employee => {\r\n    //             console.log(employee)\r\n\r\n    //             const results = employee.data.map(employee => {\r\n    //                 return {\r\n    //                     employee: employee.first_name,\r\n\r\n    //                 }\r\n    //             })\r\n\r\n\r\n    //         }).catch(error => {\r\n    //             console.log(error)\r\n    //         })\r\n\r\n    // }\r\n\r\n\r\n\r\n    // const managerList = () => {\r\n    //     axios.get('http://localhost:5000/employee')\r\n    //         .then(response => {\r\n    //             let details = [];\r\n\r\n    //             for (var i in response.data) {\r\n    //                 details.push({ name: i, value: response.data[i] })\r\n    //             }\r\n\r\n    //             this.setState({ employee: details })\r\n\r\n    //         })\r\n    // }\r\n\r\n    // const optionTest = [\r\n    //     { value: 'chocolate', label: 'Chocolate' },\r\n    //     { value: 'strawberry', label: 'Strawberry' },\r\n    //     { value: 'vanilla', label: 'Vanilla' }\r\n    // ]\r\n\r\n    useEffect(() => {\r\n        axios.get('http://localhost:5000/employee')\r\n            .then(res => {\r\n                setEmployee(res.data.map(EmployeeSchema => `${EmployeeSchema.first_name} ${EmployeeSchema.last_name}`)\r\n                )\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n\r\n    }, [])\r\n\r\n\r\n\r\n    // onChangeTitle = (e) => {\r\n    //     this.setState({\r\n    //         title: e.target.value\r\n    //     })\r\n    // }\r\n\r\n    // onChangeDescription = (e) => {\r\n    //     this.setState({\r\n    //         description: e.target.value\r\n    //     })\r\n    // }\r\n\r\n    // onChangeStartDate = (date) => {\r\n    //     this.setState({\r\n    //         startDate: date\r\n    //     })\r\n    // }\r\n\r\n    // onChangeManager = (e) => {\r\n    //     this.setState({\r\n    //         manager: e.target.value\r\n    //     })\r\n    // }\r\n\r\n    // onChangeEmployee = (e) => {\r\n    //     this.setState({\r\n    //         employee: e.target.value\r\n    //     })\r\n    // }\r\n\r\n    // onChangeStatus = (e) => {\r\n    //     this.setState({\r\n    //         status: e.target.value\r\n    //     })\r\n    // }\r\n\r\n\r\n\r\n    //DO NOT DELETE !!!\r\n    // onSubmit(e) {\r\n    //     e.preventDefault();\r\n\r\n    //     const project = {\r\n    //         title: this.state.title,\r\n    //         description: this.state.description,\r\n    //         manager: this.state.manager,\r\n    //         employee: this.state.employeeData,\r\n    //         startDate: this.state.startDate,\r\n    //         status: this.state.status\r\n    //     }\r\n    //     console.log(project);\r\n\r\n    //     axios.post('http://localhost:5000/projects', project)\r\n    //         .then(res => this.props.getSprints());\r\n\r\n    //     window.location = '/sprints';\r\n    // }\r\n\r\n\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        // let checkArray = [];\r\n        // for (var key in this.state.employeeData) {\r\n        //     if (this.state.employeeData[key] === true) {\r\n        //         checkArray.push(key);\r\n        //     }\r\n        // }\r\n\r\n        let project = {\r\n            title: title,\r\n            description: description,\r\n            manager: manager,\r\n            employee: employee,\r\n            startDate: startDate,\r\n            status: status,\r\n            // employeeData: checkArray.toString()\r\n        };\r\n\r\n        axios.post('http://localhost:5000/projects', project)\r\n            .then(res => props.getSprints())\r\n\r\n    }\r\n\r\n\r\n    const employeeOption = employee.map((selectedOption) => {\r\n\r\n        return {\r\n            value: selectedOption,\r\n            label: selectedOption\r\n        }\r\n    })\r\n\r\n    const handleChange = selectedOption => {\r\n\r\n\r\n        console.log(selectedOption);\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <Container>\r\n            <Col md=\"4\" className=\"mx-auto\">\r\n                <h1>Sprint Form</h1>\r\n                <Form onSubmit={onSubmit}  >\r\n\r\n                    <Form.Group controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Sprints Name</Form.Label>\r\n                        <Form.Control type=\"sprints\" placeholder=\"Sprints Name\" className=\"form-control\"\r\n                            value={title}\r\n                            onChange={(e) => setTitle(e.target.value)} />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"exampleForm.ControlInput2\">\r\n                        <Form.Label>Sprints Details</Form.Label>\r\n                        <Form.Control type=\"details\" placeholder=\"Sprints Details\"\r\n                            className=\"form-control\"\r\n                            value={description}\r\n                            onChange={(e) => setDescription(e.target.value)} />\r\n                    </Form.Group>\r\n\r\n\r\n                    <Form.Group controlId=\"exampleForm.ControlSelect1\">\r\n                        <Form.Label>Manager</Form.Label>\r\n                        <Form.Control as=\"select\" custom className=\"form-control\"\r\n                            value={manager}\r\n                            onChange={(e) => setManager(e.target.value)}>\r\n                            {employee.map((option) => {\r\n                                return <option\r\n                                    // key={option}\r\n                                    value={option}>{option}\r\n                                </option>;\r\n                            })}\r\n                        </Form.Control>\r\n\r\n                        {/* <Select\r\n                            options={employee}\r\n                            onChange={(e) => {\r\n                                setEmployeeData(e.target.value)\r\n                                console.log(e.target.value)\r\n                            }}\r\n                            value={employee.filter(function (option) {\r\n                                return option.value === selectedEmployee;\r\n                            })}\r\n                            label=\"Single select\"\r\n                        /> */}\r\n\r\n\r\n                    </Form.Group>\r\n\r\n\r\n\r\n                    {/* //DO NOT DELETE !!! */}\r\n                    {/* <Form.Group controlId=\"exampleForm.ControlSelect2\">\r\n                            <Form.Label>Employee</Form.Label>\r\n                            <Form.Control as=\"select\" multiple className=\"form-control\"\r\n                                value={this.state.employee} onChange={(e) => {\r\n                                    this.setState({ employeeData: e.target.value })\r\n                                    console.log(e.target.value)\r\n                                }}>\r\n                                {this.state.employee.map(function (employee) {\r\n                                    return <option\r\n                                        key={employee}\r\n                                        value={employee}>{employee}\r\n                                    </option>;\r\n                                })}\r\n                            </Form.Control> */}\r\n\r\n\r\n                    <Form>Employee</Form>\r\n                    {/* <div class=\"form-check\">\r\n                        <input\r\n                            class=\"form-check-input\"\r\n                            type=\"checkbox\"\r\n                            onChange={(e) => {\r\n                                setEmployeeData(e.target.value)\r\n                                console.log(e.target.value)\r\n                            }}\r\n                        />\r\n                        <label class=\"form-check-label\" for=\"defaultCheck1\">\r\n                            {employee.map((employee) => {\r\n                                return <option\r\n                                    key={employee}\r\n                                    value={employee}>{employee}\r\n                                </option>;\r\n                            })}\r\n                        </label>\r\n                    </div> */}\r\n                    <div>\r\n                        <Select options={employeeOption} onChange={handleChange} isMulti />\r\n                    </div>\r\n\r\n\r\n                    <Form.Group controlId=\"exampleForm.ControlSelect3\">\r\n                        <Form.Label>Status</Form.Label>\r\n                        <Form.Control as=\"select\" custom defaultValue=\"Open\" className=\"form-control\"\r\n                            value={status}\r\n                            onChange={(e) => setStatus(e.target.value)}\r\n                        >\r\n                            {/* {status.map((options) => {\r\n                                return (\r\n                                    <option>{options}</option>\r\n                                )\r\n                            })} */}\r\n\r\n                            <option>Open</option>\r\n                            <option>In Progress</option>\r\n                            <option>In Review</option>\r\n                            <option>Done</option>\r\n\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n\r\n                    <Button type=\"submit\">Submit form</Button>\r\n                </Form>\r\n            </Col>\r\n        </Container >\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default SprintsForms;\r\n"]},"metadata":{},"sourceType":"module"}